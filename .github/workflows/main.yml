name: Helm Chart Validation and Publishing

on:
  push:
    paths:
      - 'charts/**'
    branches:
      - main
  pull_request:
    paths:
      - 'charts/**'

jobs:
  validate-and-publish:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    
    env:
      RENDERED_DIR: .rendered-manifests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Identify changed charts
        id: changed_charts
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          else
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
          fi
          
          # Extract unique top-level chart directories
          CHART_DIRS=$(echo "$CHANGED_FILES" | grep "^charts/" | awk -F '/' '{print $1"/"$2}' | sort -u)

          # Keep only directories containing Chart.yaml
          VALID_CHARTS=""
          for chart in $CHART_DIRS; do
            if [ -f "$chart/Chart.yaml" ]; then
              VALID_CHARTS="$VALID_CHARTS $chart"
            fi
          done

          echo "CHART_DIRS=${VALID_CHARTS}" >> $GITHUB_ENV
          echo "Valid Helm chart directories: ${VALID_CHARTS}"

      - name: Helm lint
        id: lint
        run: |
          if [ -z "$CHART_DIRS" ]; then
            echo "No chart changes detected. Skipping linting."
            exit 0
          fi
          
          for chart in $CHART_DIRS; do
            if [ -f "$chart/Chart.yaml" ]; then
              echo "Linting chart: $chart"
              helm lint "$chart"
            else
              echo "Skipping invalid chart directory (missing Chart.yaml): $chart"
            fi
          done

      - name: Validate values and render templates
        id: render
        if: steps.lint.outcome == 'success'
        run: |
          mkdir -p "${{ github.workspace }}/.rendered-manifests"
          echo "Created rendered directory: ${{ github.workspace }}/.rendered-manifests"

          if [ -z "$CHART_DIRS" ]; then
            echo "No chart changes detected. Skipping validation."
            exit 0
          fi
          
          for chart in $CHART_DIRS; do
            if [ -d "$chart" ]; then
              chart_name=$(basename "$chart")
              echo "Processing chart: $chart_name"

              helm template "$chart" --output-dir "${{ github.workspace }}/.rendered-manifests/$chart_name"

              if [ -z "$(ls -A "${{ github.workspace }}/.rendered-manifests/$chart_name" 2>/dev/null)" ]; then
                echo "Error: No rendered files found for $chart_name"
                exit 1
              fi
            fi
          done

      - name: Create Trivy Ignore File
        run: |
          cat <<EOF > .trivyignore.yaml
          misconfigurations:
            - id: AVD-KSV-0014
              paths:
                - "$chart_name/charts/open5gs-aio-kargo/templates/mongo*.yaml"
                - "$chart_name/charts/open5gs-aio-kargo/templates/gnb-deploy.yaml"
                - "$chart_name/charts/open5gs-aio-kargo/templates/upf-deploy.yaml"
                - "$chart_name/charts/open5gs-aio-kargo/templates/ue-deploy.yaml"
      
            - id: AVD-KSV-0017
              paths:
                - "$chart_name/charts/open5gs-aio-kargo/templates/ue-deploy.yaml"
                - "$chart_name/charts/open5gs-aio-kargo/templates/upf-deploy.yaml"
      
            - id: AVD-KSV-0118
          EOF
          echo "Created .trivyignore.yaml file."

      - name: Create Trivy Config File
        run: |
          cat <<EOF > trivy.yaml
          ignorefile: .trivyignore.yaml
          EOF
          echo "Created trivy.yaml configuration file."
          
      - name: Check Rendered Directory Before Scanning
        run: |
          if [ ! -d "${{ github.workspace }}/.rendered-manifests" ]; then
            echo "Error: Rendered directory does not exist!"
            ls -la
            exit 1
          fi
          echo "Rendered directory exists, proceeding with Trivy scan."

      - name: Scan Helm charts with Trivy
        id: trivy_scan      
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: "${{ github.workspace }}/.rendered-manifests"
          format: json
          exit-code: '1'
          output: trivy-results.json
          trivy-config: 'trivy.yaml'
          severity: 'CRITICAL,HIGH'
        env:
          TRIVY_DEBUG: "true"
      
      - name: Log in to GitHub Container Registry
        if: ${{ github.event_name == 'push' && steps.trivy_scan.outcome == 'success' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Package and push modified Helm charts
        if: ${{ github.event_name == 'push' && steps.trivy_scan.outcome == 'success' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -z "$CHART_DIRS" ]; then
            echo "No chart changes detected. Skipping package and publish."
            exit 0
          fi
          
          for chart in $CHART_DIRS; do
            if [ -d "$chart" ]; then
              chart_name=$(basename "$chart")
              actual_chart_name=$(grep 'name:' "$chart/Chart.yaml" | awk '{print $2}')
              chart_version=$(grep 'version:' "$chart/Chart.yaml" | awk '{print $2}')
              
              echo "Packaging and pushing $chart_name (chart: $actual_chart_name) version $chart_version"
              helm package "$chart"
              
              package_file=$(ls ${actual_chart_name}-${chart_version}.tgz 2>/dev/null || ls ${chart_name}-${chart_version}.tgz 2>/dev/null || echo "")
              
              if [ -n "$package_file" ]; then
                helm push "$package_file" oci://ghcr.io/${{ github.repository }}/open5gs-charts
              else
                echo "Error: Could not find packaged chart file. Tried: ${actual_chart_name}-${chart_version}.tgz and ${chart_name}-${chart_version}.tgz"
                ls -la *.tgz || echo "No package files found"
                exit 1
              fi
            fi
          done
